// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Factory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultCount(): i32 {
    let value = this.get("vaultCount");
    return value!.toI32();
  }

  set vaultCount(value: i32) {
    this.set("vaultCount", Value.fromI32(value));
  }

  get vaults(): Array<string> {
    let value = this.get("vaults");
    return value!.toStringArray();
  }

  set vaults(value: Array<string>) {
    this.set("vaults", Value.fromStringArray(value));
  }

  get lastSnapshotBlockTimestamp(): BigInt {
    let value = this.get("lastSnapshotBlockTimestamp");
    return value!.toBigInt();
  }

  set lastSnapshotBlockTimestamp(value: BigInt) {
    this.set("lastSnapshotBlockTimestamp", Value.fromBigInt(value));
  }

  get lastSnapshotBlockNumber(): BigInt {
    let value = this.get("lastSnapshotBlockNumber");
    return value!.toBigInt();
  }

  set lastSnapshotBlockNumber(value: BigInt) {
    this.set("lastSnapshotBlockNumber", Value.fromBigInt(value));
  }
}

export class TradingVault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradingVault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradingVault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradingVault", id.toString(), this);
    }
  }

  static load(id: string): TradingVault | null {
    return changetype<TradingVault | null>(store.get("TradingVault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get redemptions(): Array<string> {
    let value = this.get("redemptions");
    return value!.toStringArray();
  }

  set redemptions(value: Array<string>) {
    this.set("redemptions", Value.fromStringArray(value));
  }

  get deposits(): Array<string> {
    let value = this.get("deposits");
    return value!.toStringArray();
  }

  set deposits(value: Array<string>) {
    this.set("deposits", Value.fromStringArray(value));
  }

  get redemptions(): Array<string> {
    let value = this.get("redemptions");
    return value!.toStringArray();
  }

  set redemptions(value: Array<string>) {
    this.set("redemptions", Value.fromStringArray(value));
  }

  get depositsCount(): i32 {
    let value = this.get("depositsCount");
    return value!.toI32();
  }

  set depositsCount(value: i32) {
    this.set("depositsCount", Value.fromI32(value));
  }

  get redemptionsCount(): i32 {
    let value = this.get("redemptionsCount");
    return value!.toI32();
  }

  set redemptionsCount(value: i32) {
    this.set("redemptionsCount", Value.fromI32(value));
  }

  get increasePositionCount(): i32 {
    let value = this.get("increasePositionCount");
    return value!.toI32();
  }

  set increasePositionCount(value: i32) {
    this.set("increasePositionCount", Value.fromI32(value));
  }

  get decreasePositionCount(): i32 {
    let value = this.get("decreasePositionCount");
    return value!.toI32();
  }

  set decreasePositionCount(value: i32) {
    this.set("decreasePositionCount", Value.fromI32(value));
  }

  get snapshots(): Array<string> {
    let value = this.get("snapshots");
    return value!.toStringArray();
  }

  set snapshots(value: Array<string>) {
    this.set("snapshots", Value.fromStringArray(value));
  }
}

export class VaultSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VaultSnapshot", id.toString(), this);
    }
  }

  static load(id: string): VaultSnapshot | null {
    return changetype<VaultSnapshot | null>(store.get("VaultSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get triggeredByEvent(): boolean {
    let value = this.get("triggeredByEvent");
    return value!.toBoolean();
  }

  set triggeredByEvent(value: boolean) {
    this.set("triggeredByEvent", Value.fromBoolean(value));
  }

  get TVL(): BigInt {
    let value = this.get("TVL");
    return value!.toBigInt();
  }

  set TVL(value: BigInt) {
    this.set("TVL", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get baseTokenAmountIn(): BigInt {
    let value = this.get("baseTokenAmountIn");
    return value!.toBigInt();
  }

  set baseTokenAmountIn(value: BigInt) {
    this.set("baseTokenAmountIn", Value.fromBigInt(value));
  }

  get sharesMinted(): BigInt {
    let value = this.get("sharesMinted");
    return value!.toBigInt();
  }

  set sharesMinted(value: BigInt) {
    this.set("sharesMinted", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Redeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redeem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Redeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Redeem", id.toString(), this);
    }
  }

  static load(id: string): Redeem | null {
    return changetype<Redeem | null>(store.get("Redeem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get shareBurned(): BigInt {
    let value = this.get("shareBurned");
    return value!.toBigInt();
  }

  set shareBurned(value: BigInt) {
    this.set("shareBurned", Value.fromBigInt(value));
  }

  get amountReceived(): BigInt {
    let value = this.get("amountReceived");
    return value!.toBigInt();
  }

  set amountReceived(value: BigInt) {
    this.set("amountReceived", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class IncreasePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IncreasePosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IncreasePosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IncreasePosition", id.toString(), this);
    }
  }

  static load(id: string): IncreasePosition | null {
    return changetype<IncreasePosition | null>(
      store.get("IncreasePosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get path(): Array<Bytes> {
    let value = this.get("path");
    return value!.toBytesArray();
  }

  set path(value: Array<Bytes>) {
    this.set("path", Value.fromBytesArray(value));
  }

  get tradedToken(): Bytes {
    let value = this.get("tradedToken");
    return value!.toBytes();
  }

  set tradedToken(value: Bytes) {
    this.set("tradedToken", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value!.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get minOut(): BigInt {
    let value = this.get("minOut");
    return value!.toBigInt();
  }

  set minOut(value: BigInt) {
    this.set("minOut", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value!.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value!.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get acceptablePrice(): BigInt {
    let value = this.get("acceptablePrice");
    return value!.toBigInt();
  }

  set acceptablePrice(value: BigInt) {
    this.set("acceptablePrice", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class DecreasePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DecreasePosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DecreasePosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DecreasePosition", id.toString(), this);
    }
  }

  static load(id: string): DecreasePosition | null {
    return changetype<DecreasePosition | null>(
      store.get("DecreasePosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get path(): Array<Bytes> {
    let value = this.get("path");
    return value!.toBytesArray();
  }

  set path(value: Array<Bytes>) {
    this.set("path", Value.fromBytesArray(value));
  }

  get tradedToken(): Bytes {
    let value = this.get("tradedToken");
    return value!.toBytes();
  }

  set tradedToken(value: Bytes) {
    this.set("tradedToken", Value.fromBytes(value));
  }

  get collateralDelta(): BigInt {
    let value = this.get("collateralDelta");
    return value!.toBigInt();
  }

  set collateralDelta(value: BigInt) {
    this.set("collateralDelta", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value!.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value!.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get acceptablePrice(): BigInt {
    let value = this.get("acceptablePrice");
    return value!.toBigInt();
  }

  set acceptablePrice(value: BigInt) {
    this.set("acceptablePrice", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
